package br.estacio.lpr.exercicioslivro2014;

/*
ExercÃ­cio 12.33: ???
O algoritmo de CÃ©sar de criptografia de strings Ã© uma versÃ£o melhorada do algoritmo rot13 (veja exercÃ­cio 12.32): o seu
funcionamento Ã© o mesmo, sÃ³ que, em vez de substituir cada caracter por um caracter treze posiÃ§Ãµes depois, o algoritmo
de CÃ©sar recebe um valor chamado chave, e usa esse valor como o nÃºmero de posiÃ§Ãµes que devem ser puladas para
a criptografia. Por exemplo, se a chave for 1, o algoritmo pularÃ¡ uma posiÃ§Ã£o ao codificar as letras, entÃ£o se a string
passada for â€œJavaâ€?, o resultado serÃ¡ â€œKbwbâ€?. O algoritmo de decodificaÃ§Ã£o deve receber a mesma chave, sÃ³ que deve
substituir os caracteres da string por valores em posiÃ§Ãµes anteriores.
Escreva um mÃ©todo estÃ¡tico codificaCÃ©sar na classe Criptografia que implemente o algoritmo de CÃ©sar, recebendo
como argumentos uma string e uma chave (valor numÃ©rico) e retornando a string criptografada. Esse mÃ©todo deve
considerar que somente as letras nÃ£o-acentuadas devem ser criptografadas, as letras acentuadas, nÃºmeros, espaÃ§os e
outros sÃ­mbolos devem continuar como estÃ£o. Escreva tambÃ©m o mÃ©todo decodificaCÃ©sar.
Dica: Para simplificar o algoritmo, considere que o valor da chave sÃ³ pode estar entre 1 e 25. Existem ao menos duas
maneiras de implementar esse algoritmo.
ExercÃ­cio 12.34: ???
O mecanismo de casamento de padrÃµes mostrado na classe CasamentoDePadroes (figura 12.10) considera caracteres
maiÃºsculos e minÃºsculos como sendo diferentes. Modifique a classe CasamentoDePadroes de forma que esta encapsule
tambÃ©m um valor booleano ignoreCase, que deve ser inicializado pelo construtor, usando um argumento. Se esse valor
booleano for igual a true, o mÃ©todo casa deverÃ¡ considerar caracteres maiÃºsculos iguais a minÃºsculos. Dica: A
resposta do exercÃ­cio 12.21 poderÃ¡ ser de ajuda.
ExercÃ­cio 12.36: ???
Escreva uma classe CodigoMorse com mÃ©todos estÃ¡ticos que convertam strings de caracteres para strings em cÃ³digo
morse e vice-versa. No cÃ³digo morse, caracteres sÃ£o representados por pontos (correspondentes a um impulso elÃ©trico
curto) e traÃ§os (correspondentes a um impulso elÃ©trico longo). Os caracteres bÃ¡sicos e seus correspondentes em cÃ³digo
morse sÃ£o mostrados abaixo:
a .âˆ’ b âˆ’... c âˆ’.âˆ’. d âˆ’.. e . f ..âˆ’.
g âˆ’âˆ’. h .... i .. j .âˆ’âˆ’âˆ’ k âˆ’.âˆ’ l .âˆ’..
m âˆ’âˆ’ n âˆ’. o âˆ’âˆ’âˆ’ p .âˆ’âˆ’. q âˆ’âˆ’.âˆ’ r .âˆ’.
s ... t âˆ’ u ..âˆ’ v ...âˆ’ w .âˆ’âˆ’ x âˆ’..âˆ’
y âˆ’.âˆ’âˆ’ z âˆ’âˆ’.. ponto
.âˆ’.âˆ’.âˆ’
vÃ­rgula
âˆ’âˆ’..âˆ’âˆ’
A cada caracter que for codificado, um espaÃ§o deve ser adicionado Ã  string de saÃ­da. O mÃ©todo para codificaÃ§Ã£o deve
considerar caracteres maiÃºsculos e minÃºsculos como sendo equivalentes, e ignorar outros sÃ­mbolos. Exemplo: se a
string â€?Farfalharâ€? for passada para o mÃ©todo de codificaÃ§Ã£o, este deve retornar â€œ..âˆ’. .âˆ’ .âˆ’. ..âˆ’. .âˆ’ .âˆ’..
.... .âˆ’ .âˆ’.â€?.
Dica: Para a decodificaÃ§Ã£o de cÃ³digo morse para caracteres, use os espaÃ§os que devem existir na string codificada como
delimitadores dos caracteres do cÃ³digo morse. Se algum cÃ³digo morse nÃ£o tiver caracter correspondente (por exemplo,
â€œâˆ’âˆ’âˆ’âˆ’âˆ’â€?), use o caracter ? para saÃ­da.
ExercÃ­cio 12.41: ???
O algoritmo das fatias de criptografia usa como entrada uma string e um valor numÃ©rico, sendo que esse valor numÃ©rico
(o nÃºmero de fatias) deve ser bem menor que o tamanho da string. O algoritmo de codificaÃ§Ã£o fatia a string de entrada,
tomando caracteres de N em N posiÃ§Ãµes, onde N Ã© o nÃºmero de fatias, formando N novas strings cada uma com o
comprimento M onde M Ã© o comprimento da string original dividido por N. As strings criadas assim sÃ£o concatenadas,
sendo o resultado da codificaÃ§Ã£o da string original. Para decodificar uma string criptografada com esse algoritmo, Ã©
necessÃ¡rio ter o valor numÃ©rico.
Por exemplo, para criptografar a string â€œProgramaÃ§Ã£o em Javaâ€? (19 caracteres) usando 4 como nÃºmero de fatias, o
primeiro passo seria completar a string de forma que tenha um nÃºmero de caracteres mÃºltiplo de 4, para â€œProgramaÃ§Ã£o
em Java â€? (20 caracteres), para simplificar o algoritmo. Fatiando essa string, pegando de quatro em quatro caracteres,
obtemos quatro novas strings:
â€˜â€˜PrÃ§eaâ€™â€™
â€˜â€˜raÃ£mvâ€™â€™
â€˜â€˜omo aâ€™â€™
â€˜â€˜ga J â€™â€™
A string criptografada seria o resultado da concatenaÃ§Ã£o dessas strings ou â€œPrÃ§earaÃ£mvomo aga J â€?. Para decodificar
essa string, basta repetir o processo de codificaÃ§Ã£o mas usando M como o nÃºmeo de fatias, obtendo as strings
â€˜â€˜Progâ€™â€™
â€˜â€˜ramaâ€™â€™
â€˜â€˜Ã§Ã£o â€™â€™
â€˜â€˜em Jâ€™â€™
â€˜â€˜ava â€™â€™
cuja concatenaÃ§Ã£o resulta em â€œProgramaÃ§Ã£o em Java â€?.
Escreva, na classe Criptografia, o mÃ©todo codificaFatias que recebe uma string e um valor numÃ©rico, codificando
a string usando o valor e retornando a string criptografada. Escreva tambÃ©m o mÃ©todo decodificaFatias que deve
fazer o processo reverso. Dica: O mÃ©todo decodificaFatias pode ser uma chamada para o mÃ©todo codificaFatias
com o valor numÃ©rico adequado.
ExercÃ­cio 12.43: ???
O algoritmo das pontas de criptografia recebe uma string como argumento e produz uma outra string como resultado,
e pode ser descrito da seguinte forma: enquanto a string de entrada contiver caracteres, remova o primeiro e o Ãºltimo
caracteres da string de entrada e os coloque na string de saÃ­da. Dessa forma, se a string â€œProgramaÃ§Ã£o em Javaâ€? for
entrada no algoritmo, este mostrarÃ¡ como saÃ­da a string â€œParvoagJr ammea Ã§oÃ£â€?. A decodificaÃ§Ã£o de uma string pode
ser feita da seguinte forma: crie duas strings temporÃ¡rias, e para cada par de caracteres extraÃ­dos da string codificada de
entrada adicione o primeiro no fim da primeira string e o segundo no inÃ­cio da segunda string. A concatenaÃ§Ã£o das duas
strings Ã© o resultado da decodificaÃ§Ã£o.
Escreva, na classe Criptografia, os mÃ©todos estÃ¡ticos codificaPontas e decodificaPontas para codificar e deco-dificar uma string usando esse algoritmo.
ExercÃ­cio 12.45: ????
Escreva a classe CasamentoDePadroesComCoringa que execute o algoritmo de casamento de padrÃµes mostrado na
seÃ§Ã£o 12.4 mas considerando que o caracter â€™?â€™ tambÃ©m possa ser usado, e que o algoritmo de casamento considere
que esse caracter Ã© igual a qualquer outro caracter que apareÃ§a na string sendo analisada. Dessa forma, se o padrÃ£o
encapsulado for â€œ{re,di}??deâ€? as strings â€œresideâ€?, â€œdivideâ€? e â€œrevideâ€? casarÃ£o com o padrÃ£o, enquanto as strings
â€œrebeldeâ€? e â€œrelateâ€? nÃ£o casarÃ£o. Dicas: Considere as diferenÃ§as do algoritmo no tratamento de caracteres â€™?â€™ como
sendo um singleton e como sendo parte da lista de alternativas. Vale a pena escrever essa classe como sendo herdeira da
classe CasamentoDePadroes? Quais as vantagens e dificuldades esperadas
ExercÃ­cio 12.50: ????
O algoritmo de CÃ©sar (veja o exercÃ­cio 12.33) pode ser implementado de maneira mais complexa (e difÃ­cil de ser que-brada) se, em vez de uma Ãºnica chave, vÃ¡rias forem usadas. O primeiro caracter da string serÃ¡ codificado com a primeira
chave, o segundo caracter com a segunda chave etc. Quando as chaves acabarem, a primeira serÃ¡ reutilizada, atÃ© o final
da string a ser codificada. A chave pode ser especificada por outra string, onde cada caracter tem um valor numÃ©rico
correspondente, de forma que a string â€?AEIYâ€? corresponde a quatro chaves (1, 5, 9, 25). Dessa forma, se a string
â€?Programaâ€? fosse codificada com a chave â€?aebâ€? (correspondente aos valores 1, 5 e 2) o resultado seria â€?Qwqhwcnfâ€?
(â€™Pâ€™ foi adicionada a 1 e o resultado Ã© â€™Qâ€™, â€™râ€™ foi adicionada a 5 e o resultado Ã© â€™wâ€™, â€™oâ€™ foi adicionada a 2 e o
resultado Ã© â€™qâ€™, â€™gâ€™ foi adicionada a 1 e o resultado Ã© â€™hâ€™, â€™râ€™ foi adicionada a 5 e o resultado Ã© â€™wâ€™ etc.) â€“ note o uso
cÃ­clico dos valores da chave.
Escreva um mÃ©todo estÃ¡tico codificaCÃ©sar na classe Criptografia (veja exercÃ­cio 12.32) que implemente o algo-ritmo de CÃ©sar modificado, recebendo duas strings como argumento: a primeira serÃ¡ a string a ser criptografada e a
segunda serÃ¡ a chave. Esse mÃ©todo deverÃ¡ retornar outra instÃ¢ncia da classe String correspondendo ao primeiro ar-gumento, criptografado. Esse mÃ©todo deve considerar que somente as letras nÃ£o-acentuadas devem ser criptografadas;
as letras acentuadas, nÃºmeros, espaÃ§os e outros sÃ­mbolos devem continuar como estÃ£o. Escreva tambÃ©m o mÃ©todo
decodificaCÃ©sar, que tambÃ©m recebe duas strings como argumentos e retorna a string decodificada.
Dica: Para simplificar o algoritmo, considere que o valor da chave sÃ³ pode estar entre 1 e 26, ou seja, as letras â€™Aâ€™ a
â€™Zâ€™. O algoritmo de codificaÃ§Ã£o deve verificar se a string passada como chave Ã© vÃ¡lida, ou seja, se ela contÃ©m somente
caracteres maiÃºsculos na faixa prevista.
ExercÃ­cio 12.55: ????
Uma palavra ou frase Ã© dita anagrama de outra se ela pode ser formada com os caracteres de outra, sem repetiÃ§Ãµes,
modificando as posiÃ§Ãµes e inserindo espaÃ§os e pontuaÃ§Ã£o Ã  vontade, valendo tambÃ©m transformar maiÃºsculas em mi-nÃºsculas e vice-versa. Dessa forma, â€œmanda jogar em vaporâ€? Ã© anagrama de â€œprogramando em javaâ€?. Anagramas
sÃ£o curiosidades lingÃ¼Ã­sticas, geralmente feitos para satirizar nomes de pessoas ou locais. Para que um anagrama seja
considerado interessante, as palavras formadas devem ter algum significado. Escreva, para a classe StringUtils (fi-gura 12.8), um mÃ©todo Ã©Anagrama que receba duas strings como argumentos e retorne true se uma Ã© anagrama de
outra
*/
public class Criptografia 
{

}
